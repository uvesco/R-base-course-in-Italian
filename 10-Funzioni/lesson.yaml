- Class: meta
  Course: R base course in Italian
  Lesson: 10-Funzioni
  Author: Sean Kross
  Type: Standard
  Organization: Unaapi
  Version: 3.0.1
- Class: text
  Output: 10.1-Le funzioni sono uno degli elementi costitutivi fondamentali del linguaggio
    R. Sono piccoli pezzi di codice riutilizzabile che possono essere trattati come
    qualsiasi altro oggetto R.
- Class: text
  Output: 10.2-Se hai svolto qualsiasi altra parte di questo corso, probabilmente
    hai già utilizzato alcune funzioni. Le funzioni sono generalmente caratterizzate
    dal nome della funzione seguito da parentesi.
- Class: cmd_question
  Output: 10.3-Proviamo a utilizzare alcune funzioni di base solo per divertimento.
    La funzione Sys.Date() restituisce una stringa che rappresenta la data odierna.
    Digita Sys.Date() sotto e guarda cosa succede.
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: 'Visualizza la data odierna digitando: Sys.Date()'
- Class: text
  Output: 10.4-La maggior parte delle funzioni in R restituisce un valore. Funzioni
    come Sys.Date() restituiscono un valore basato sull'ambiente del computer, mentre
    altre funzioni manipolano i dati di input per calcolare un valore restituito.
- Class: cmd_question
  Output: 10.5-La funzione mean() accetta un vettore di numeri come input e restituisce
    la media di tutti i numeri nel vettore di input. Gli input alle funzioni sono
    spesso chiamati argomenti. Fornire argomenti a una funzione è talvolta chiamato
    anche passare argomenti a quella funzione. Gli argomenti che vuoi passare a una
    funzione vanno all'interno delle parentesi della funzione. Prova a passare l'argomento
    c(2, 4, 5) alla funzione mean().
  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: 'Calcola la media di 2, 4 e 5 digitando: mean(c(2, 4, 5))'
- Class: text
  Output: 10.6-Le funzioni di solito accettano argomenti che sono variabili su cui
    opera la funzione. Ad esempio, la funzione mean() accetta un vettore come argomento,
    come nel caso di mean(c(2,6,8)). La funzione mean() quindi somma tutti i numeri
    nel vettore e divide tale somma per la lunghezza del vettore.
- Class: text
  Output: 10.7-Nella domanda seguente ti verrà chiesto di modificare uno script che
    apparirà non appena passerai da questa domanda. Quando hai finito di modificare
    lo script, salva le modifiche allo script e digita submit() e lo script verrà
    valutato. Ci saranno alcuni commenti nello script che si apre, quindi assicurati
    di leggerli!
- Class: script
  Output: 10.8-L'ultima espressione R da valutare in una funzione diventerà il valore
    di ritorno di quella funzione. Vogliamo che questa funzione prenda un argomento,
    x, e restituisca x senza modificarlo. Elimina il cancelletto in modo che x venga
    restituito senza alcuna modifica. Assicurati di salvare lo script prima di digitare
    submit().
  AnswerTests: test_func1()
  Hint: Assicurati di eliminare il cancelletto in modo che l'ultima espressione nella
    funzione sia solo x.
  Script: boring_function.R
- Class: cmd_question
  Output: '10.9-Ora che hai creato la tua prima funzione, proviamola! Digita: noiosa_funzione("La
    mia prima funzione!"). Se la tua funzione funziona, dovrebbe semplicemente restituire
    la stringa: "La mia prima funzione!"'
  CorrectAnswer: noiosa_funzione('La mia prima funzione!')
  AnswerTests: omnitest(correctExpr="noiosa_funzione('La mia prima funzione!')")
  Hint: 'Prova noiosa_funzione digitando: noiosa_funzione(''La mia prima funzione!'')'
- Class: text
  Output: "10.10-Congratulazioni per aver scritto la tua prima funzione. Scrivendo
    funzioni, \npuoi ottenere informazioni approfondite su come funziona R. Come disse
    una \nvolta John Chambers, il creatore di R: Per comprendere i calcoli in R, sono
    \nutili due slogan: 1. Tutto ciò che esiste è un oggetto. 2. Tutto ciò che \naccade
    è una chiamata di funzione."
- Class: cmd_question
  Output: '10.11-Se vuoi vedere il codice sorgente di qualsiasi funzione, digita semplicemente
    il nome della funzione senza argomenti o parentesi. Proviamolo con la funzione
    che hai appena creato. Digita: noiosa_funzione per visualizzarne il codice sorgente.'
  CorrectAnswer: noiosa_funzione
  AnswerTests: omnitest(correctExpr='noiosa_funzione')
  Hint: 'Per vedere il codice sorgente di noiosa_funzione basta digitare: noiosa_funzione'
- Class: text
  Output: '10.12-È ora di creare una funzione più utile! Replicheremo la funzionalità
    della funzione mean() creando una funzione chiamata: mia_media(). Ricorda che
    per calcolare la media di tutti i numeri in un vettore devi trovare la somma di
    tutti i numeri nel vettore, quindi dividere tale somma per il numero di numeri
    nel vettore.'
- Class: script
  Output: 10.13-Assicurati di salvare lo script prima di digitare submit().
  AnswerTests: test_func2()
  Hint: Usa la funzione sum() per trovare la somma di tutti i numeri nel vettore.
    Utilizzare la funzione length() per trovare la dimensione del vettore.
  Script: my_mean.R
- Class: cmd_question
  Output: 10.14-Ora prova la tua funzione mia_media() trovando la media del vettore
    c(4, 5, 10).
  CorrectAnswer: mia_media(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='mia_media(c(4, 5, 10))')
  Hint: Esegui il comando mia_media(c(4, 5, 10)) per testare la tua nuova funzione.
- Class: text
  Output: 10.15-Successivamente, proviamo a scrivere una funzione con argomenti predefiniti.
    Puoi impostare valori predefiniti per gli argomenti di una funzione e questo può
    essere utile se pensi che qualcuno che usa la tua funzione imposterà un certo
    argomento sullo stesso valore per la maggior parte del tempo.
- Class: script
  Output: 10.16-Assicurati di salvare lo script prima di digitare submit().
  AnswerTests: test_func3()
  Hint: Ricordati di impostare i valori predefiniti appropriati!
  Script: remainder.R
- Class: cmd_question
  Output: 10.17-Facciamo un po' di test sulla funzione remainder. Esegui remainder(5)
    e guarda cosa succede.
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: 'Testiamo la tua funzione resto eseguendo: remainder(5)'
- Class: text
  Output: 10.18-Prendiamoci un momento per esaminare cosa è appena successo. Hai fornito
    un argomento alla funzione e R ha abbinato tale argomento a "num" poiché "num"
    è il primo argomento. Il valore predefinito per 'divisor' è 2, quindi la funzione
    ha utilizzato il valore predefinito fornito.
- Class: cmd_question
  Output: '10.19-Ora testiamo la funzione remainder fornendo due argomenti. Digita:
    remainder(11, 5) e vediamo cosa succede.'
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: 'Testiamo la tua funzione remainder eseguendo: remainder(11, 5)'
- Class: text
  Output: 10.20-Ancora una volta, gli argomenti sono stati abbinati in modo appropriato.
- Class: cmd_question
  Output: '10.21-È inoltre possibile specificare in modo esplicito gli argomenti in
    una funzione. Quando si designano in modo esplicito i valori degli argomenti per
    nome, l''ordine degli argomenti diventa irrilevante. Puoi provarlo digitando:
    remainder(divisor = 11, num = 5).'
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: 'L''ordine non ha più importanza quando dichiari esplicitamente i valori degli
    argomenti! Prova questo digitando: remainder(divisor = 11, num = 5)'
- Class: text
  Output: 10.22-Come puoi vedere, c'è una differenza significativa tra remainder(11,
    5) e remainder(divisor = 11, num = 5)!
- Class: cmd_question
  Output: '10.23-Con tutto questo parlare di argomenti, potresti chiederti se c''è
    un modo per vedere gli argomenti di una funzione (oltre a guardare la documentazione).
    Per fortuna, puoi usare la funzione args()! Digitare: args(remainder) per esaminare
    gli argomenti per la funzione remainder.'
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: 'Guarda gli argomenti della funzione remainder digitando: args(remainder)'
- Class: text
  Output: '10.24-Potresti non rendertene conto, ma ti ho appena indotto a fare qualcosa
    di piuttosto interessante! args() è una funzione, remainder() è una funzione,
    tuttavia remainder era un argomento per args(). Sì è vero: puoi passare le funzioni
    come argomenti! Questo è un concetto molto potente. Scriviamo uno script per vedere
    come funziona.'
- Class: script
  Output: 10.25-Assicurati di salvare lo script prima di digitare submit().
  AnswerTests: test_func4()
  Hint: Assicurati che quando passi una funzione come argomento passi il nome della
    funzione senza parentesi!
  Script: evaluate.R
- Class: cmd_question
  Output: 10.26-Prendiamo la tua nuova funzione evaluate() per una prova! Utilizza
    evaluate() per trovare la deviazione standard del vettore c(1.4, 3.6, 7.9, 8.8).
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: La funzione per la deviazione standard si chiama sd(). Assicurati che quando
    passi una funzione come argomento passi il nome della funzione senza parentesi!
- Class: text
  Output: 10.27-L'idea di passare funzioni come argomenti di altre funzioni è un concetto
    importante e fondamentale nella programmazione.
- Class: text
  Output: 10.28-Potresti essere sorpreso di apprendere che puoi anche passare una
    funzione come argomento senza prima definire la funzione che passi. Le funzioni
    prive di nome sono note come funzioni anonime.
- Class: text
  Output: 10.29-Usiamo la funzione evaluate per esplorare come funzionano le funzioni
    anonime. Per il primo argomento della funzione evaluate scriveremo una piccola
    funzione che sta su una riga. Nel secondo argomento passeremo alcuni dati alla
    minuscola funzione anonima nel primo argomento.
- Class: cmd_question
  Output: 10.30-Digita il seguente comando e poi discuteremo come funziona:evaluate(function(x){x+1},
    6)
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: Basta digitare il comando evaluate(funzione(x){x+1}, 6)
- Class: text
  Output: 10.31-Il primo argomento è una minuscola funzione anonima che accetta un
    argomento "x" e restituisce "x+1". Abbiamo passato il numero 6 in questa funzione
    in modo che l'espressione dia 7.
- Class: cmd_question
  Output: 10.32-Prova a utilizzare evaluate() insieme a una funzione anonima per restituire
    il primo elemento del vettore c(8, 4, 0). La tua funzione anonima dovrebbe prendere
    solo un argomento che dovrebbe essere una variabile `x`.
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: Potrebbe essere necessario ricordare come indicizzare gli elementi vettoriali.
    Ricorda che la tua funzione anonima dovrebbe avere un solo argomento e quell'argomento
    dovrebbe essere chiamato "x".
- Class: cmd_question
  Output: 10.33-Ora prova a utilizzare evaluate() insieme a una funzione anonima per
    restituire l'ultimo elemento del vettore c(8, 4, 0). La tua funzione anonima dovrebbe
    prendere solo un argomento che dovrebbe essere una variabile `x`.
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: Potrebbe essere necessario ricordare come indicizzare gli elementi vettoriali.
    Ricorda che la tua funzione anonima dovrebbe avere un solo argomento e quell'argomento
    dovrebbe essere chiamato "x". L'uso della funzione length() nella tua funzione
    anonima potrebbe aiutarti.
